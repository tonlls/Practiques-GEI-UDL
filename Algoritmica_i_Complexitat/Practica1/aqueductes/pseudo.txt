-----------------ITERATIU-----------------
DEFINE FUNCTION its_posible_2pilars(height,rects):
    rads=calc_radius([rects[0],rects[-1]])[0]
    FOR i IN range(1,len(rects)):
        IF rects[i][1]>=height 
		   or not possible_pic(height,rads,[rects[0],rects[-1]],rects[i]):
            RETURN False
    RETURN True

DEFINE FUNCTION its_posible_multi_pilar(height,rects):
    rads=calc_radius(rects)
    hig=0
    FOR i,value IN enumerate(rects):
        IF i==0:
            hig=height-rads[0]
        ELSEIF i==len(rects)-1:
            hig=height-rads[-1]
        ELSE:
            hig=height-max(rads[i],rads[i+1])
        IF value[1]>=height-hig:
            RETURN False
    RETURN True


---------RECURSIU-----------------
DEFINE FUNCTION its_posible_2pilars(height,rects):
    rads=calc_radius([rects[0],rects[-1]])[0]
    RETURN its_posible_2pilars_rec(height,rects[1:-1],rads,[rects[0],rects[-1]])

DEFINE FUNCTION its_posible_2pilars_rec(height,rects,rad,cols):
    IF len(rects)==1:
        RETURN not rects[0][1]>=height and  possible_pic(height,rad,cols,rects[0])
    RETURN ((not rects[0][1]>=height
            and possible_pic(height,rad,cols,rects[0]))
            and its_posible_2pilars_rec(height,rects[1:],rad,cols))

DEFINE FUNCTION its_posible_multi_pilar(height,rects):
    rads=calc_radius(rects)
    RETURN its_posible_multi_pilar_rec(height,rects,rads,True)

DEFINE FUNCTION its_posible_multi_pilar_rec(height,rects,rads,first=False):
    IF len(rects)==1:
        RETURN rects[0][1]>height-rads[0]
    IF first:
        RETURN rects[0][1]>height-rads[0] and its_posible_multi_pilar_rec(height,rects[1:],rads)
    RETURN (rects[0][1]>height-max(rads[0],rads[1])
            and its_posible_multi_pilar_rec(height,rects[1:],rads[1:]))
